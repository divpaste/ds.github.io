{
    "DC-Insert-Start": "void insertStart_dc(int data) {\n\tstruct node *ptr = (struct node*)malloc(sizeof(struct node));\n\tif (ptr == NULL) { printf(\"Memory Allocation Failed.\"); return; }\n\tptr->data = data; ptr->next = ptr->prev = NULL;\n\tif (start == NULL) { start = last = ptr; ptr->next = ptr->prev = start; return; }\n\tptr->next = start; start->prev = ptr; start = ptr; last->next = start; start->prev = last;\n}",

    "DC-Insert-End": "void insertEnd_dc(int data) {\n\tstruct node *ptr = (struct node*)malloc(sizeof(struct node));\n\tif (ptr == NULL) { printf(\"Memory Allocation Failed.\"); return; }\n\tptr->data = data; ptr->next = ptr->prev = NULL;\n\tif (start == NULL) { start = last = ptr; ptr->next = ptr->prev = start; return; }\n\tlast->next = ptr; ptr->prev = last; last = ptr; last->next = start; start->prev = last;\n}",

    "DC-Insert-Before": "void insertBefore_dc(int data, int elem) {\n\tint pos = search(elem);\n\tif (pos == -1 || pos == -2) { printf(\"Operation cannot be performed.\"); return; }\n\tstruct node *ptr = (struct node*)malloc(sizeof(struct node));\n\tif (!ptr) { printf(\"Memory Allocation Failed.\"); return; }\n\tptr->data = data; ptr->next = ptr->prev = NULL;\n\tif (pos == 0) { ptr->next = start; start->prev = ptr; start = ptr; last->next = start; start->prev = last; return; }\n\tstruct node *temp = start;\n\tfor (int i = 0; i < pos-1; i++) temp = temp->next;\n\tptr->prev = temp; ptr->next = temp->next; temp->next->prev = ptr; temp->next = ptr;\n}",

    "DC-Insert-After": "void insertAfter_dc(int data, int elem) {\n\tint pos = search(elem);\n\tif (pos == -1 || pos == -2) { printf(\"Operation cannot be performed.\"); return; }\n\tstruct node *ptr = (struct node*)malloc(sizeof(struct node));\n\tptr->data = data; ptr->next = ptr->prev = NULL;\n\tif (pos == count()-1) { ptr->prev = last; last->next = ptr; last = ptr; last->next = start; start->prev = last; return; }\n\tstruct node *temp = start;\n\tfor (int i=0;i<pos;i++) temp=temp->next;\n\tptr->prev=temp; ptr->next=temp->next; temp->next->prev=ptr; temp->next=ptr;\n}",

    "DC-Insert-At": "void insertAt_dc(int data, int pos) {\n\tif (pos<1 || pos>count()+1) { printf(\"Enter Position in Range: (1 - %d)\", count()+1); return; }\n\tstruct node *ptr=(struct node*)malloc(sizeof(struct node));\n\tptr->data=data; ptr->next=ptr->prev=NULL;\n\tif(pos==1 && start==NULL){ start=last=ptr; ptr->next=ptr->prev=start; return; }\n\tif(pos==1){ ptr->next=start; start->prev=ptr; start=ptr; last->next=start; start->prev=last; return; }\n\tif(pos==count()+1){ ptr->prev=last; last->next=ptr; last=ptr; last->next=start; start->prev=last; return; }\n\tstruct node *temp=start; for(int i=0;i<pos-2;i++) temp=temp->next;\n\tptr->prev=temp; ptr->next=temp->next; temp->next->prev=ptr; temp->next=ptr;\n}",

    "DC-Delete-Start": "void deleteStart_dc() {\n\tif (!start) { printf(\"List is Empty.\"); return; }\n\tstruct node *del=start;\n\tif(start==last){ start=last=NULL; free(del); return; }\n\tstart=start->next; last->next=start; start->prev=last; free(del);\n}",

    "DC-Delete-End": "void deleteEnd_dc() {\n\tif(!start){ printf(\"List is Empty.\"); return; }\n\tstruct node *del=last;\n\tif(start==last){ start=last=NULL; free(del); return; }\n\tlast=last->prev; last->next=start; start->prev=last; free(del);\n}",

    "DC-Delete-Before": "void deleteBefore_dc(int elem) {\n\tint pos=search(elem);\n\tif(pos==-1 || pos==-2){ printf(\"Operation cannot be performed.\"); return; }\n\tif(pos==0){ printf(\"No Value present before\"); return; }\n\tstruct node *del;\n\tif(pos==1){ del=start; start=start->next; last->next=start; start->prev=last; free(del); return; }\n\tstruct node *temp=start; for(int i=0;i<pos-2;i++) temp=temp->next;\n\tdel=temp->next; temp->next=del->next; del->next->prev=temp; free(del);\n}",

    "DC-Delete-After": "void deleteAfter_dc(int elem) {\n\tint pos=search(elem);\n\tif(pos==-1||pos==-2){ printf(\"Operation cannot be performed.\"); return; }\n\tif(pos==count()-1){ printf(\"No Value present After\"); return; }\n\tstruct node *temp=start,*del;\n\tif(pos==count()-2){ del=last; last=last->prev; last->next=start; start->prev=last; free(del); return; }\n\tfor(int i=0;i<pos;i++) temp=temp->next;\n\tdel=temp->next; temp->next=del->next; del->next->prev=temp; free(del);\n}",

    "DC-Delete-At": "void deleteAt_dc(int pos){\n\tif(!start){ printf(\"List is Empty.\"); return; }\n\tif(pos<1 || pos>count()){ printf(\"Enter Position in Range: (1 - %d)\",count()); return; }\n\tstruct node *temp=start,*del;\n\tif(pos==1){ del=start; start=start->next; last->next=start; start->prev=last; free(del); return; }\n\tif(pos==count()){ del=last; last=last->prev; last->next=start; start->prev=last; free(del); return; }\n\tfor(int i=0;i<pos-2;i++) temp=temp->next;\n\tdel=temp->next; temp->next=del->next; del->next->prev=temp; free(del);\n}",

    "DC-Delete-Elem": "void deleteElem_dc(int elem){\n\tint pos=search(elem);\n\tif(pos==-1||pos==-2){ printf(\"Operation cannot be performed.\"); return; }\n\tstruct node *temp=start,*del;\n\tif(pos==0 && start==last){ del=start; start=last=NULL; free(del); return; }\n\tif(pos==0){ del=start; start=start->next; last->next=start; start->prev=last; free(del); return; }\n\tif(pos==count()-1){ del=last; last=last->prev; last->next=start; start->prev=last; free(del); return; }\n\tfor(int i=0;i<pos-1;i++) temp=temp->next;\n\tdel=temp->next; temp->next=del->next; del->next->prev=temp; free(del);\n}"
}
